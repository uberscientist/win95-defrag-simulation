// Generated by CoffeeScript 1.3.3
(function() {
  var genHDD, randInt, window;

  window = this;

  randInt = function(low, high) {
    return Math.round(Math.random() * (high - 1) + low);
  };

  genHDD = function(numCluster) {
    var i, rnd, run, val, _i, _results;
    _results = [];
    for (i = _i = 0; 0 <= numCluster ? _i <= numCluster : _i >= numCluster; i = 0 <= numCluster ? ++_i : --_i) {
      rnd = randInt(1, 600);
      switch (rnd) {
        case 1:
          run = randInt(1, 10);
          val = 1;
          break;
        case 2:
          run = randInt(1, 10);
          val = 2;
          break;
        case 4 || 40 || 44:
          run = randInt(20, 200);
          val = 4;
          break;
        case 5:
          run = randInt(1, 10);
          val = 5;
          break;
        case 6:
          run = randInt(5, 20);
          val = 6;
      }
      if (run > 0) {
        run--;
        _results.push(val);
      } else {
        _results.push(0);
      }
    }
    return _results;
  };

  $(function() {
    var canvas, clusterH, clusterW, ctx, drawHDD, resizeCanvas;
    $("audio")[0].play();
    canvas = document.getElementById('cluster-canvas');
    ctx = canvas.getContext('2d');
    clusterW = 9;
    clusterH = 11;
    $(window).resize(function() {
      return resizeCanvas();
    });
    resizeCanvas = function() {
      var columnSize, hdd, height, numCluster, rowSize, width;
      width = $('#viewer').width() - 30;
      height = $('#viewer').height();
      canvas.width = width;
      canvas.height = height;
      rowSize = Math.floor(width / clusterW);
      columnSize = Math.floor(height / clusterH);
      numCluster = Math.floor(rowSize * columnSize);
      hdd = genHDD(numCluster);
      return drawHDD(hdd, rowSize, columnSize, width, height);
    };
    drawHDD = function(hdd, rowSize, columnSize, width, height) {
      var clusterSprite;
      clusterSprite = new Image();
      clusterSprite.src = 'imgs/cluster_sprites.png';
      return clusterSprite.onload = function() {
        var animate, cluster, drawCluster, i, readCluster, writeCluster, _i, _len;
        drawCluster = function(cluster, index) {
          var xOffset, yOffset;
          xOffset = (index % rowSize) * clusterW;
          yOffset = Math.floor(index / rowSize) * clusterH;
          return ctx.drawImage(clusterSprite, clusterW * cluster, 0, clusterW, clusterH, xOffset, yOffset, clusterW, clusterH);
        };
        for (i = _i = 0, _len = hdd.length; _i < _len; i = ++_i) {
          cluster = hdd[i];
          drawCluster(cluster, i);
        }
        readCluster = function(index) {
          hdd[index] = 4;
          drawCluster(7, index);
          return setTimeout(function() {
            return drawCluster(4, index);
          }, 100);
        };
        writeCluster = function(cluster, index) {
          drawCluster(8, index);
          return setTimeout(function() {
            return (function(cluster, index) {
              hdd[index] = cluster;
              return drawCluster(cluster, index);
            })(cluster, index);
          }, 100);
        };
        animate = function(hdd) {
          var readIndex, writeIndex;
          if (window.writer || window.reader) {
            clearInterval(window.writer);
            clearInterval(window.reader);
          }
          readIndex = Math.floor(hdd.length / 2);
          window.reader = setInterval(function() {
            return setTimeout(function() {
              var curCluster, hdLen;
              curCluster = hdd[readIndex];
              hdLen = hdd.length;
              return (function(curCluster) {
                if (writeIndex >= hdLen) {
                  clearInterval(window.reader);
                }
                if (curCluster < 3) {
                  readCluster(readIndex);
                }
                return readIndex++;
              })(curCluster);
            }, randInt(0, 1200));
          }, 60);
          writeIndex = 0;
          return window.writer = setInterval(function() {
            return setTimeout(function() {
              var curCluster, hdLen;
              curCluster = hdd[writeIndex];
              hdLen = hdd.length;
              return (function(curCluster) {
                if (writeIndex >= hdLen) {
                  resizeCanvas();
                }
                if (curCluster !== 5 && curCluster !== 6) {
                  writeCluster(3, writeIndex);
                  return writeIndex++;
                } else {
                  return writeIndex++;
                }
              })(curCluster);
            }, randInt(0, 1200));
          }, 30);
        };
        return animate(hdd);
      };
    };
    return resizeCanvas();
  });

}).call(this);
